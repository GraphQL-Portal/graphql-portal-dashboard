diff --git a/node_modules/@graphql-mesh/postgraphile/index.js b/node_modules/@graphql-mesh/postgraphile/index.js
index 10a068e..474f35e 100644
--- a/node_modules/@graphql-mesh/postgraphile/index.js
+++ b/node_modules/@graphql-mesh/postgraphile/index.js
@@ -59,12 +59,13 @@ class PostGraphileHandler {
             importFn: this.importFn,
             defaultExportName: 'default',
         });
+        const readCache = Object.keys(cachedIntrospection).length ? cachedIntrospection : false;
         const builder = await postgraphileCore.getPostGraphileBuilder(pgPool, this.config.schemaName || 'public', {
             dynamicJson: true,
             subscriptions: 'subscriptions' in this.config ? this.config.subscriptions : true,
             live: 'live' in this.config ? this.config.live : true,
-            readCache: cachedIntrospection,
-            writeCache: !cachedIntrospection && dummyCacheFilePath,
+            readCache,
+            writeCache: !readCache && dummyCacheFilePath,
             setWriteCacheCallback: fn => {
                 writeCache = fn;
             },
diff --git a/node_modules/@graphql-mesh/postgraphile/index.mjs b/node_modules/@graphql-mesh/postgraphile/index.mjs
index 9b4e040..78e72d0 100644
--- a/node_modules/@graphql-mesh/postgraphile/index.mjs
+++ b/node_modules/@graphql-mesh/postgraphile/index.mjs
@@ -55,12 +55,13 @@ class PostGraphileHandler {
             importFn: this.importFn,
             defaultExportName: 'default',
         });
+        const readCache = Object.keys(cachedIntrospection).length ? cachedIntrospection : false;
         const builder = await getPostGraphileBuilder(pgPool, this.config.schemaName || 'public', {
             dynamicJson: true,
             subscriptions: 'subscriptions' in this.config ? this.config.subscriptions : true,
             live: 'live' in this.config ? this.config.live : true,
-            readCache: cachedIntrospection,
-            writeCache: !cachedIntrospection && dummyCacheFilePath,
+            readCache,
+            writeCache: !readCache && dummyCacheFilePath,
             setWriteCacheCallback: fn => {
                 writeCache = fn;
             },
