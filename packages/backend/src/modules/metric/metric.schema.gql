type Chart {
  latency: [ChartChunk]
  count: [ChartChunk]
  countries: [ChartChunk]
  failures: [ChartChunk]
}

type ChartChunk {
  argument: String
  value: Float
  success: Float
  failure: Float
}

type ApiActivity {
  apiDef: String
  apiName: String
  lastAccess: String
  failed: Int
  success: Int
  latency: Float
  count: Int
}

input MetricFilters {
  startDate: Timestamp!
  endDate: Timestamp!
  sourceId: String
  apiDef: ID
  user: String
}

type Query {
  metrics(scale: String, filters: MetricFilters!): Chart
  getUserMetrics(scale: String, filters: MetricFilters!): Chart
  getApiActivity(filters: MetricFilters!): [ApiActivity]
}
